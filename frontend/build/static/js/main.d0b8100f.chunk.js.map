{"version":3,"sources":["logo.svg","components/landing.js","components/record.js","components/url.js","components/language.js","firebase/config.js","components/firebase.js","components/join.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Landing","style","marginTop","to","className","Record","useState","isRecording","setIsRecording","justifyContent","display","onClick","event","position","top","transform","Url","Language","value","setValue","getItemValue","item","label","items","renderItem","isHighlighted","background","onChange","e","target","onSelect","val","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","Test","text","setText","useEffect","ref","on","snapshot","data","forEach","snap","push","content","console","log","Join","type","name","App","path","component","Watch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d0b8100f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction Landing() {\n\n\n  return (\n    <div>\n      <h4>\n        Create a live transcript through the microphone's audio\n      </h4>\n      <div style ={{marginTop:\"30px\"}}>\n        <Link to = \"/join\" className = \"buttonA\"> Join </Link>\n        <Link to = \"/language\" className = \"buttonA\"> Create </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Landing;","import React,{useState} from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction Record() {\n    const [isRecording, setIsRecording] = useState(false);\n\n    function onClick(event){\n        setIsRecording(!isRecording);\n    }\n  return (\n    <div>\n      <h3>\n        Allow Your Microphone Upon Pop-up\n      </h3>\n      <div style ={{marginTop:\"30px\", justifyContent:\"center\", display:\"flex\"}} onClick={onClick}>\n        <div style={{position:\"absolute\"}} className = {isRecording?\"recordT\":\"recordF\"}>\n            <div style = {{top:\"50%\", position:\"relative\", transform:\"translate(0,-50%)\"}}>{isRecording?\"Transcribing...\":\"Start\"}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Record;\n","import React,{useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport { Container, Header, List } from \"semantic-ui-react\";\nimport pkg from 'semantic-ui-react/package.json'\n\n\nfunction Url() {\n    const [isRecording, setIsRecording] = useState(false);\n\n    function onClick(event){\n        setIsRecording(!isRecording);\n    }\n  return (\n    <div>\n      <h3>\n        Your Room's URL is\n      </h3>\n      <h4>\n          sublive.com/283d4a91\n      </h4>\n      <Link to = \"/record\" className = \"buttonA\"> Start </Link>\n\n    </div>\n  );\n}\n\nexport default Url;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Dropdown } from 'semantic-ui-react';\nimport Autocomplete from 'react-autocomplete';\n\nfunction Language() {\n\n\n    const languageOptions = [\n        { key: 'Chinese', text: 'Chinese', value: 'Chinese' },\n        { key: 'Dutch', text: 'Dutch', value: 'Dutch' },\n        { key: 'English', text: 'English', value: 'English' },\n    ]\n    const [value,setValue] = useState();\n\n    return (\n        <div className=\"languageCon\">\n            <h4>Choose Your Language</h4>\n            <div style={{position:\"relative\"}}>\n            <Autocomplete\n                getItemValue={(item) => item.label}\n                items={[\n                    { label: 'English' },\n                    { label: 'Spanish' },\n                    { label: 'Chinese' },\n                    { label: 'Dutch' },\n                    { label: 'Korea' },\n                    { label: 'French' },\n                    { label: 'Polish' }\n                ]}\n                renderItem={(item, isHighlighted) =>\n                    <div style={{ background: isHighlighted ? 'lightgray' : 'white' }}>\n                        {item.label}\n                    </div>\n                }\n                value={value}\n                onChange={(e) => setValue(e.target.value)}\n                onSelect={(val) => setValue(val)}\n            />\n            </div>\n                        <Link to= \"/url\" className=\"buttonA\">Generate Link</Link>\n\n        </div>\n    );\n}\n\nexport default Language;\n","import * as firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst config = {\n\tapiKey: 'AIzaSyBzN5MTXipw2EdEhk-ZsR9ZB_cO4Gp8Dwo',\n\tauthDomain: 'hackathon-285803.firebaseapp.com',\n\tdatabaseURL: 'https://hackathon-285803.firebaseio.com',\n\tprojectId: 'hackathon-285803',\n\tstorageBucket: 'hackathon-285803.appspot.com',\n\tmessagingSenderId: '272399976569',\n\tappId: '1:272399976569:web:d182f1f7e6667f541a6ca8',\n\tmeasurementId: 'G-4TPN6KK3P7'\n};\n\nfirebase.initializeApp(config);\n\nexport const db = firebase.database();\n","import React, { useEffect, useState, useRef } from 'react';\nimport { db } from '../firebase/config';\nfunction Test() {\n\t//const messagesEndRef = useRef(null);\n\tconst [text, setText] = useState([]);\n\tuseEffect(() => {\n\t\ttry {\n\t\t\tdb.ref().on('value', (snapshot) => {\n\t\t\t\tlet data = [];\n\t\t\t\tsnapshot.forEach((snap) => {\n\t\t\t\t\tdata.push(snap.val().content + ' ');\n\t\t\t\t});\n\t\t\t\tconsole.log(data);\n\t\t\t\tsetText(data); // Reads from realtime DB and stores into state\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t\t//messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n\t}, []);\n\n\treturn <div className=\"transcriptCon\">{text}</div> \n\t\t{/*<div ref={messagesEndRef} />*/}  // print out all lines of text\n\t\n}\nexport default Test;","import React,{useState} from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction Join() {\n    const [isRecording, setIsRecording] = useState(false);\n\n    function onClick(event){\n        setIsRecording(!isRecording);\n    }\n  return (\n    <div>\n      <h3>\n        Room URL:\n      </h3>\n      <input type=\"text\" name=\"pasteurl\" />\n      <Link to = \"/watch\" className = \"buttonA\"> Join </Link>\n\n    </div>\n  );\n}\n\nexport default Join;\n","\nimport React from 'react';\nimport logo from './logo.svg';\nimport {Route,Switch} from \"react-router-dom\";\nimport Landing from \"./components/landing\";\nimport Record from \"./components/record\";\nimport Url from \"./components/url\";\nimport Language from \"./components/language\";\nimport Watch from \"./components/firebase\";\nimport Join from \"./components/join\";\n\n\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <h1>\n        SUBLIVE\n      </h1>\n      <Switch>\n        <Route path =\"/watch\" component={Watch}/>\n        <Route path =\"/join\" component={Join}/>\n        <Route path = \"/record\" component = {Record}/>\n        <Route path = \"/url\" component = {Url}/>\n        <Route path = \"/language\" component = {Language}/>\n        <Route path = \"\" component = {Landing}/>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}