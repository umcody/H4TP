{"ast":null,"code":"import _regeneratorRuntime from\"/Users/codyum/Desktop/Github/h4tp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/codyum/Desktop/Github/h4tp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/codyum/Desktop/Github/h4tp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState,useRef}from'react';import{db}from'../firebase/config';function Test(){var messagesEndRef=useRef(null);var _useState=useState([]),_useState2=_slicedToArray(_useState,2),text=_useState2[0],setText=_useState2[1];useEffect(function(){try{db.ref().on('value',function(snapshot){var data=[];snapshot.forEach(function(snap){data.push(snap.val().content+' ');});console.log(data);setText(data);// Reads from realtime DB and stores into state\n});}catch(e){console.log(e);}messagesEndRef.current.scrollIntoView({behavior:\"smooth\"});},[]);useEffect(function(){var writeData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return db.ref().push({content:'lorem2'// lorem2 should be replaced with text from Google Speech2Text API\n});case 3:_context.next=8;break;case 5:_context.prev=5;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 8:case\"end\":return _context.stop();}}},_callee,null,[[0,5]]);}));return function writeData(){return _ref.apply(this,arguments);};}();writeData();},[]);// will need to re-render everytime we get new text from Google Speech2Text API\nreturn/*#__PURE__*/React.createElement(\"div\",{className:\"transcriptCon\"},text,/*#__PURE__*/React.createElement(\"div\",{ref:messagesEndRef}))// print out all lines of text\n;}export default Test;","map":{"version":3,"sources":["/Users/codyum/Desktop/Github/h4tp/src/components/firebase.js"],"names":["React","useEffect","useState","useRef","db","Test","messagesEndRef","text","setText","ref","on","snapshot","data","forEach","snap","push","val","content","console","log","e","current","scrollIntoView","behavior","writeData"],"mappings":"qcAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,CAAqCC,MAArC,KAAmD,OAAnD,CACA,OAASC,EAAT,KAAmB,oBAAnB,CACA,QAASC,CAAAA,IAAT,EAAgB,CACf,GAAMC,CAAAA,cAAc,CAAGH,MAAM,CAAC,IAAD,CAA7B,CADe,cAESD,QAAQ,CAAC,EAAD,CAFjB,wCAERK,IAFQ,eAEFC,OAFE,eAGfP,SAAS,CAAC,UAAM,CACf,GAAI,CACHG,EAAE,CAACK,GAAH,GAASC,EAAT,CAAY,OAAZ,CAAqB,SAACC,QAAD,CAAc,CAClC,GAAIC,CAAAA,IAAI,CAAG,EAAX,CACAD,QAAQ,CAACE,OAAT,CAAiB,SAACC,IAAD,CAAU,CAC1BF,IAAI,CAACG,IAAL,CAAUD,IAAI,CAACE,GAAL,GAAWC,OAAX,CAAqB,GAA/B,EACA,CAFD,EAGAC,OAAO,CAACC,GAAR,CAAYP,IAAZ,EACAJ,OAAO,CAACI,IAAD,CAAP,CAAe;AACf,CAPD,EAQA,CAAC,MAAOQ,CAAP,CAAU,CACXF,OAAO,CAACC,GAAR,CAAYC,CAAZ,EACA,CACDd,cAAc,CAACe,OAAf,CAAuBC,cAAvB,CAAsC,CAAEC,QAAQ,CAAE,QAAZ,CAAtC,EACA,CAdQ,CAcN,EAdM,CAAT,CAgBAtB,SAAS,CAAC,UAAM,CACf,GAAMuB,CAAAA,SAAS,0FAAG,yKAEVpB,CAAAA,EAAE,CAACK,GAAH,GAASM,IAAT,CAAc,CACnBE,OAAO,CAAE,QAAS;AADC,CAAd,CAFU,sFAMhBC,OAAO,CAACC,GAAR,cANgB,mEAAH,kBAATK,CAAAA,SAAS,0CAAf,CAUAA,SAAS,GACT,CAZQ,CAYN,EAZM,CAAT,CAYQ;AAER,mBACA,2BAAK,SAAS,CAAC,eAAf,EACEjB,IADF,cAEC,2BAAK,GAAG,CAAED,cAAV,EAFD,CAGO;AAJP,CAMA,CACD,cAAeD,CAAAA,IAAf","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { db } from '../firebase/config';\nfunction Test() {\n\tconst messagesEndRef = useRef(null);\n\tconst [text, setText] = useState([]);\n\tuseEffect(() => {\n\t\ttry {\n\t\t\tdb.ref().on('value', (snapshot) => {\n\t\t\t\tlet data = [];\n\t\t\t\tsnapshot.forEach((snap) => {\n\t\t\t\t\tdata.push(snap.val().content + ' ');\n\t\t\t\t});\n\t\t\t\tconsole.log(data);\n\t\t\t\tsetText(data); // Reads from realtime DB and stores into state\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t\tmessagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconst writeData = async () => {\n\t\t\ttry {\n\t\t\t\tawait db.ref().push({\n\t\t\t\t\tcontent: 'lorem2' // lorem2 should be replaced with text from Google Speech2Text API\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t}\n\t\t};\n\n\t\twriteData();\n\t}, []); // will need to re-render everytime we get new text from Google Speech2Text API\n\n\treturn (\n\t<div className=\"transcriptCon\">\n\t\t{text}\n\t\t<div ref={messagesEndRef} />\n\t</div> // print out all lines of text\n\t)\n}\nexport default Test;"]},"metadata":{},"sourceType":"module"}