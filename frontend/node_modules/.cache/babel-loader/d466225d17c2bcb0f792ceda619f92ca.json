{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeechClient = void 0;\n\nconst gax = require(\"google-gax\");\n\nconst path = require(\"path\");\n\nconst gapicConfig = require(\"./speech_client_config.json\");\n\nconst google_gax_1 = require(\"google-gax\");\n\nconst version = require('../../../package.json').version;\n/**\n *  Service that implements Google Cloud Speech API.\n * @class\n * @memberof v1\n */\n\n\nclass SpeechClient {\n  /**\n   * Construct an instance of SpeechClient.\n   *\n   * @param {object} [options] - The configuration object. See the subsequent\n   *   parameters for more details.\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   */\n  constructor(opts) {\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include the service address and port.\n\n    const staticMembers = this.constructor;\n    const servicePath = opts && opts.servicePath ? opts.servicePath : opts && opts.apiEndpoint ? opts.apiEndpoint : staticMembers.servicePath;\n    const port = opts && opts.port ? opts.port : staticMembers.port;\n\n    if (!opts) {\n      opts = {\n        servicePath,\n        port\n      };\n    }\n\n    opts.servicePath = opts.servicePath || servicePath;\n    opts.port = opts.port || port; // users can override the config from client side, like retry codes name.\n    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546\n    // The way to override client config for Showcase API:\n    //\n    // const customConfig = {\"interfaces\": {\"google.showcase.v1beta1.Echo\": {\"methods\": {\"Echo\": {\"retry_codes_name\": \"idempotent\", \"retry_params_name\": \"default\"}}}}}\n    // const showcaseClient = new showcaseClient({ projectId, customConfig });\n\n    opts.clientConfig = opts.clientConfig || {}; // If we're running in browser, it's OK to omit `fallback` since\n    // google-gax has `browser` field in its `package.json`.\n    // For Electron (which does not respect `browser` field),\n    // pass `{fallback: true}` to the SpeechClient constructor.\n\n    this._gaxModule = opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options\n    // sent to the client.\n\n    opts.scopes = this.constructor.scopes;\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Determine the client header string.\n\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n\n    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n    this._protos = this._gaxGrpc.loadProto(opts.fallback ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../../protos/protos.json') : nodejsProtoPath); // Some of the methods on this service provide streaming responses.\n    // Provide descriptors for these.\n\n    this.descriptors.stream = {\n      streamingRecognize: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING)\n    }; // This API contains \"long-running operations\", which return a\n    // an Operation object that allows for tracking of the operation,\n    // rather than holding a request open.\n\n    const protoFilesRoot = opts.fallback ? this._gaxModule.protobuf.Root.fromJSON( // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../../protos/protos.json')) : this._gaxModule.protobuf.loadSync(nodejsProtoPath);\n    this.operationsClient = this._gaxModule.lro({\n      auth: this.auth,\n      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined\n    }).operationsClient(opts);\n    const longRunningRecognizeResponse = protoFilesRoot.lookup('.google.cloud.speech.v1.LongRunningRecognizeResponse');\n    const longRunningRecognizeMetadata = protoFilesRoot.lookup('.google.cloud.speech.v1.LongRunningRecognizeMetadata');\n    this.descriptors.longrunning = {\n      longRunningRecognize: new this._gaxModule.LongrunningDescriptor(this.operationsClient, longRunningRecognizeResponse.decode.bind(longRunningRecognizeResponse), longRunningRecognizeMetadata.decode.bind(longRunningRecognizeMetadata))\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.cloud.speech.v1.Speech', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {};\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.speechStub) {\n      return this.speechStub;\n    } // Put together the \"service stub\" for\n    // google.cloud.speech.v1.Speech.\n\n\n    this.speechStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.cloud.speech.v1.Speech') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.cloud.speech.v1.Speech, this._opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const speechStubMethods = ['recognize', 'longRunningRecognize', 'streamingRecognize'];\n\n    for (const methodName of speechStubMethods) {\n      const callPromise = this.speechStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], this.descriptors.page[methodName] || this.descriptors.stream[methodName] || this.descriptors.longrunning[methodName]);\n\n      this.innerApiCalls[methodName] = apiCall;\n    }\n\n    return this.speechStub;\n  }\n  /**\n   * The DNS address for this API service.\n   */\n\n\n  static get servicePath() {\n    return 'speech.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   */\n\n\n  static get apiEndpoint() {\n    return 'speech.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @param {function(Error, string)} callback - the callback to\n   *   be called with the current project Id.\n   */\n\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n  /**\n   * Performs synchronous speech recognition: receive results after all audio\n   * has been sent and processed.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.cloud.speech.v1.RecognitionConfig} request.config\n   *   Required. Provides information to the recognizer that specifies how to\n   *   process the request.\n   * @param {google.cloud.speech.v1.RecognitionAudio} request.audio\n   *   Required. The audio data to be recognized.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [RecognizeResponse]{@link google.cloud.speech.v1.RecognizeResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  recognize(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    this.initialize();\n    return this.innerApiCalls.recognize(request, options, callback);\n  }\n  /**\n   * Performs bidirectional streaming speech recognition: receive results while\n   * sending audio. This method is only available via the gRPC API (not REST).\n   *\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which is both readable and writable. It accepts objects\n   *   representing [StreamingRecognizeRequest]{@link google.cloud.speech.v1.StreamingRecognizeRequest} for write() method, and\n   *   will emit objects representing [StreamingRecognizeResponse]{@link google.cloud.speech.v1.StreamingRecognizeResponse} on 'data' event asynchronously.\n   */\n\n\n  _streamingRecognize(options) {\n    this.initialize();\n    return this.innerApiCalls.streamingRecognize(options);\n  }\n  /**\n   * Performs asynchronous speech recognition: receive results via the\n   * google.longrunning.Operations interface. Returns either an\n   * `Operation.error` or an `Operation.response` which contains\n   * a `LongRunningRecognizeResponse` message.\n   * For more information on asynchronous speech recognition, see the\n   * [how-to](https://cloud.google.com/speech-to-text/docs/async-recognize).\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.cloud.speech.v1.RecognitionConfig} request.config\n   *   Required. Provides information to the recognizer that specifies how to\n   *   process the request.\n   * @param {google.cloud.speech.v1.RecognitionAudio} request.audio\n   *   Required. The audio data to be recognized.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  longRunningRecognize(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    this.initialize();\n    return this.innerApiCalls.longRunningRecognize(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by the longRunningRecognize() method.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *\n   * @example:\n   *   const decodedOperation = await checkLongRunningRecognizeProgress(name);\n   *   console.log(decodedOperation.result);\n   *   console.log(decodedOperation.done);\n   *   console.log(decodedOperation.metadata);\n   *\n   */\n\n\n  async checkLongRunningRecognizeProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.longRunningRecognize, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\n   * Terminate the GRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   */\n\n\n  close() {\n    this.initialize();\n\n    if (!this._terminated) {\n      return this.speechStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.SpeechClient = SpeechClient;","map":{"version":3,"sources":["../../../src/v1/speech_client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpeechClient = void 0;\nconst gax = require(\"google-gax\");\nconst path = require(\"path\");\nconst gapicConfig = require(\"./speech_client_config.json\");\nconst google_gax_1 = require(\"google-gax\");\nconst version = require('../../../package.json').version;\n/**\n *  Service that implements Google Cloud Speech API.\n * @class\n * @memberof v1\n */\nclass SpeechClient {\n    /**\n     * Construct an instance of SpeechClient.\n     *\n     * @param {object} [options] - The configuration object. See the subsequent\n     *   parameters for more details.\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     */\n    constructor(opts) {\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include the service address and port.\n        const staticMembers = this.constructor;\n        const servicePath = opts && opts.servicePath\n            ? opts.servicePath\n            : opts && opts.apiEndpoint\n                ? opts.apiEndpoint\n                : staticMembers.servicePath;\n        const port = opts && opts.port ? opts.port : staticMembers.port;\n        if (!opts) {\n            opts = { servicePath, port };\n        }\n        opts.servicePath = opts.servicePath || servicePath;\n        opts.port = opts.port || port;\n        // users can override the config from client side, like retry codes name.\n        // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546\n        // The way to override client config for Showcase API:\n        //\n        // const customConfig = {\"interfaces\": {\"google.showcase.v1beta1.Echo\": {\"methods\": {\"Echo\": {\"retry_codes_name\": \"idempotent\", \"retry_params_name\": \"default\"}}}}}\n        // const showcaseClient = new showcaseClient({ projectId, customConfig });\n        opts.clientConfig = opts.clientConfig || {};\n        // If we're running in browser, it's OK to omit `fallback` since\n        // google-gax has `browser` field in its `package.json`.\n        // For Electron (which does not respect `browser` field),\n        // pass `{fallback: true}` to the SpeechClient constructor.\n        this._gaxModule = opts.fallback ? gax.fallback : gax;\n        // Create a `gaxGrpc` object, with any grpc-specific options\n        // sent to the client.\n        opts.scopes = this.constructor.scopes;\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        // For Node.js, pass the path to JSON proto file.\n        // For browsers, pass the JSON content.\n        const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n        this._protos = this._gaxGrpc.loadProto(opts.fallback\n            ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n                require('../../protos/protos.json')\n            : nodejsProtoPath);\n        // Some of the methods on this service provide streaming responses.\n        // Provide descriptors for these.\n        this.descriptors.stream = {\n            streamingRecognize: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING),\n        };\n        // This API contains \"long-running operations\", which return a\n        // an Operation object that allows for tracking of the operation,\n        // rather than holding a request open.\n        const protoFilesRoot = opts.fallback\n            ? this._gaxModule.protobuf.Root.fromJSON(\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\n            require('../../protos/protos.json'))\n            : this._gaxModule.protobuf.loadSync(nodejsProtoPath);\n        this.operationsClient = this._gaxModule\n            .lro({\n            auth: this.auth,\n            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,\n        })\n            .operationsClient(opts);\n        const longRunningRecognizeResponse = protoFilesRoot.lookup('.google.cloud.speech.v1.LongRunningRecognizeResponse');\n        const longRunningRecognizeMetadata = protoFilesRoot.lookup('.google.cloud.speech.v1.LongRunningRecognizeMetadata');\n        this.descriptors.longrunning = {\n            longRunningRecognize: new this._gaxModule.LongrunningDescriptor(this.operationsClient, longRunningRecognizeResponse.decode.bind(longRunningRecognizeResponse), longRunningRecognizeMetadata.decode.bind(longRunningRecognizeMetadata)),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.cloud.speech.v1.Speech', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.speechStub) {\n            return this.speechStub;\n        }\n        // Put together the \"service stub\" for\n        // google.cloud.speech.v1.Speech.\n        this.speechStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.cloud.speech.v1.Speech')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.cloud.speech.v1.Speech, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const speechStubMethods = [\n            'recognize',\n            'longRunningRecognize',\n            'streamingRecognize',\n        ];\n        for (const methodName of speechStubMethods) {\n            const callPromise = this.speechStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], this.descriptors.page[methodName] ||\n                this.descriptors.stream[methodName] ||\n                this.descriptors.longrunning[methodName]);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.speechStub;\n    }\n    /**\n     * The DNS address for this API service.\n     */\n    static get servicePath() {\n        return 'speech.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     */\n    static get apiEndpoint() {\n        return 'speech.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     */\n    static get scopes() {\n        return ['https://www.googleapis.com/auth/cloud-platform'];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @param {function(Error, string)} callback - the callback to\n     *   be called with the current project Id.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Performs synchronous speech recognition: receive results after all audio\n     * has been sent and processed.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.cloud.speech.v1.RecognitionConfig} request.config\n     *   Required. Provides information to the recognizer that specifies how to\n     *   process the request.\n     * @param {google.cloud.speech.v1.RecognitionAudio} request.audio\n     *   Required. The audio data to be recognized.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [RecognizeResponse]{@link google.cloud.speech.v1.RecognizeResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    recognize(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        this.initialize();\n        return this.innerApiCalls.recognize(request, options, callback);\n    }\n    /**\n     * Performs bidirectional streaming speech recognition: receive results while\n     * sending audio. This method is only available via the gRPC API (not REST).\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing [StreamingRecognizeRequest]{@link google.cloud.speech.v1.StreamingRecognizeRequest} for write() method, and\n     *   will emit objects representing [StreamingRecognizeResponse]{@link google.cloud.speech.v1.StreamingRecognizeResponse} on 'data' event asynchronously.\n     */\n    _streamingRecognize(options) {\n        this.initialize();\n        return this.innerApiCalls.streamingRecognize(options);\n    }\n    /**\n     * Performs asynchronous speech recognition: receive results via the\n     * google.longrunning.Operations interface. Returns either an\n     * `Operation.error` or an `Operation.response` which contains\n     * a `LongRunningRecognizeResponse` message.\n     * For more information on asynchronous speech recognition, see the\n     * [how-to](https://cloud.google.com/speech-to-text/docs/async-recognize).\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.cloud.speech.v1.RecognitionConfig} request.config\n     *   Required. Provides information to the recognizer that specifies how to\n     *   process the request.\n     * @param {google.cloud.speech.v1.RecognitionAudio} request.audio\n     *   Required. The audio data to be recognized.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    longRunningRecognize(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        this.initialize();\n        return this.innerApiCalls.longRunningRecognize(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by the longRunningRecognize() method.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *\n     * @example:\n     *   const decodedOperation = await checkLongRunningRecognizeProgress(name);\n     *   console.log(decodedOperation.result);\n     *   console.log(decodedOperation.done);\n     *   console.log(decodedOperation.metadata);\n     *\n     */\n    async checkLongRunningRecognizeProgress(name) {\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.longRunningRecognize, gax.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    /**\n     * Terminate the GRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.speechStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.SpeechClient = SpeechClient;\n//# sourceMappingURL=speech_client.js.map"]},"metadata":{},"sourceType":"script"}