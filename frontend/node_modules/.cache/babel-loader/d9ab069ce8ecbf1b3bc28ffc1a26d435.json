{"ast":null,"code":"import _slicedToArray from\"/Users/codyum/Desktop/Github/h4tp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState,useRef}from'react';import{db}from'../firebase/config';function Test(){//const messagesEndRef = useRef(null);\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),text=_useState2[0],setText=_useState2[1];useEffect(function(){try{db.ref().on('value',function(snapshot){var data=[];snapshot.forEach(function(snap){data.push(snap.val().content+' ');});console.log(data);setText(data);// Reads from realtime DB and stores into state\n});}catch(e){console.log(e);}//messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n},[]);return/*#__PURE__*/React.createElement(\"div\",{className:\"transcriptCon\"},text);{/*<div ref={messagesEndRef} />*/}// print out all lines of text\n}export default Test;","map":{"version":3,"sources":["/Users/codyum/Desktop/Github/h4tp/src/components/firebase.js"],"names":["React","useEffect","useState","useRef","db","Test","text","setText","ref","on","snapshot","data","forEach","snap","push","val","content","console","log","e"],"mappings":"wJAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,CAAqCC,MAArC,KAAmD,OAAnD,CACA,OAASC,EAAT,KAAmB,oBAAnB,CACA,QAASC,CAAAA,IAAT,EAAgB,CACf;AADe,cAESH,QAAQ,CAAC,EAAD,CAFjB,wCAERI,IAFQ,eAEFC,OAFE,eAGfN,SAAS,CAAC,UAAM,CACf,GAAI,CACHG,EAAE,CAACI,GAAH,GAASC,EAAT,CAAY,OAAZ,CAAqB,SAACC,QAAD,CAAc,CAClC,GAAIC,CAAAA,IAAI,CAAG,EAAX,CACAD,QAAQ,CAACE,OAAT,CAAiB,SAACC,IAAD,CAAU,CAC1BF,IAAI,CAACG,IAAL,CAAUD,IAAI,CAACE,GAAL,GAAWC,OAAX,CAAqB,GAA/B,EACA,CAFD,EAGAC,OAAO,CAACC,GAAR,CAAYP,IAAZ,EACAJ,OAAO,CAACI,IAAD,CAAP,CAAe;AACf,CAPD,EAQA,CAAC,MAAOQ,CAAP,CAAU,CACXF,OAAO,CAACC,GAAR,CAAYC,CAAZ,EACA,CACD;AACA,CAdQ,CAcN,EAdM,CAAT,CAgBA,mBAAO,2BAAK,SAAS,CAAC,eAAf,EAAgCb,IAAhC,CAAP,CACC,CAAC,gCAAiC,CAAE;AAErC,CACD,cAAeD,CAAAA,IAAf","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { db } from '../firebase/config';\nfunction Test() {\n\t//const messagesEndRef = useRef(null);\n\tconst [text, setText] = useState([]);\n\tuseEffect(() => {\n\t\ttry {\n\t\t\tdb.ref().on('value', (snapshot) => {\n\t\t\t\tlet data = [];\n\t\t\t\tsnapshot.forEach((snap) => {\n\t\t\t\t\tdata.push(snap.val().content + ' ');\n\t\t\t\t});\n\t\t\t\tconsole.log(data);\n\t\t\t\tsetText(data); // Reads from realtime DB and stores into state\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t\t//messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n\t}, []);\n\n\treturn <div className=\"transcriptCon\">{text}</div> \n\t\t{/*<div ref={messagesEndRef} />*/}  // print out all lines of text\n\t\n}\nexport default Test;"]},"metadata":{},"sourceType":"module"}