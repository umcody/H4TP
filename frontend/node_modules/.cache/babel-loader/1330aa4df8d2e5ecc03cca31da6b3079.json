{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\n\nconst debug = require('debug')('record');\n\nconst {\n  spawn\n} = require('child_process');\n\nconst recorders = require('./recorders');\n\nclass Recording {\n  constructor(options = {}) {\n    const defaults = {\n      sampleRate: 16000,\n      channels: 1,\n      compress: false,\n      threshold: 0.5,\n      thresholdStart: null,\n      thresholdEnd: null,\n      silence: '1.0',\n      recorder: 'sox',\n      endOnSilence: false,\n      audioType: 'wav'\n    };\n    this.options = Object.assign(defaults, options);\n    const recorder = recorders.load(this.options.recorder);\n    const {\n      cmd,\n      args,\n      spawnOptions = {}\n    } = recorder(this.options);\n    this.cmd = cmd;\n    this.args = args;\n    this.cmdOptions = Object.assign({\n      encoding: 'binary',\n      stdio: 'pipe'\n    }, spawnOptions);\n    debug(`Started recording`);\n    debug(this.options);\n    debug(` ${this.cmd} ${this.args.join(' ')}`);\n    return this.start();\n  }\n\n  start() {\n    const {\n      cmd,\n      args,\n      cmdOptions\n    } = this;\n    const cp = spawn(cmd, args, cmdOptions);\n    const rec = cp.stdout;\n    const err = cp.stderr;\n    this.process = cp; // expose child process\n\n    this._stream = rec; // expose output stream\n\n    cp.on('close', code => {\n      if (code === 0) return;\n      rec.emit('error', `${this.cmd} has exited with error code ${code}.\n\nEnable debugging with the environment variable DEBUG=record.`);\n    });\n    err.on('data', chunk => {\n      debug(`STDERR: ${chunk}`);\n    });\n    rec.on('data', chunk => {\n      debug(`Recording ${chunk.length} bytes`);\n    });\n    rec.on('end', () => {\n      debug('Recording ended');\n    });\n    return this;\n  }\n\n  stop() {\n    assert(this.process, 'Recording not yet started');\n    this.process.kill();\n  }\n\n  pause() {\n    assert(this.process, 'Recording not yet started');\n    this.process.kill('SIGSTOP');\n\n    this._stream.pause();\n\n    debug('Paused recording');\n  }\n\n  resume() {\n    assert(this.process, 'Recording not yet started');\n    this.process.kill('SIGCONT');\n\n    this._stream.resume();\n\n    debug('Resumed recording');\n  }\n\n  isPaused() {\n    assert(this.process, 'Recording not yet started');\n    return this._stream.isPaused();\n  }\n\n  stream() {\n    assert(this._stream, 'Recording not yet started');\n    return this._stream;\n  }\n\n}\n\nmodule.exports = {\n  record: (...args) => new Recording(...args)\n};","map":{"version":3,"sources":["/Users/codyum/Desktop/Github/h4tp/node_modules/node-record-lpcm16/index.js"],"names":["assert","require","debug","spawn","recorders","Recording","constructor","options","defaults","sampleRate","channels","compress","threshold","thresholdStart","thresholdEnd","silence","recorder","endOnSilence","audioType","Object","assign","load","cmd","args","spawnOptions","cmdOptions","encoding","stdio","join","start","cp","rec","stdout","err","stderr","process","_stream","on","code","emit","chunk","length","stop","kill","pause","resume","isPaused","stream","module","exports","record"],"mappings":"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","sourcesContent":["'use strict'\n\nconst assert = require('assert')\nconst debug = require('debug')('record')\nconst { spawn } = require('child_process')\nconst recorders = require('./recorders')\n\nclass Recording {\n  constructor (options = {}) {\n    const defaults = {\n      sampleRate: 16000,\n      channels: 1,\n      compress: false,\n      threshold: 0.5,\n      thresholdStart: null,\n      thresholdEnd: null,\n      silence: '1.0',\n      recorder: 'sox',\n      endOnSilence: false,\n      audioType: 'wav'\n    }\n\n    this.options = Object.assign(defaults, options)\n\n    const recorder = recorders.load(this.options.recorder)\n    const { cmd, args, spawnOptions = {} } = recorder(this.options)\n\n    this.cmd = cmd\n    this.args = args\n    this.cmdOptions = Object.assign({ encoding: 'binary', stdio: 'pipe' }, spawnOptions)\n\n    debug(`Started recording`)\n    debug(this.options)\n    debug(` ${this.cmd} ${this.args.join(' ')}`)\n\n    return this.start()\n  }\n\n  start () {\n    const { cmd, args, cmdOptions } = this\n\n    const cp = spawn(cmd, args, cmdOptions)\n    const rec = cp.stdout\n    const err = cp.stderr\n\n    this.process = cp // expose child process\n    this._stream = rec // expose output stream\n\n    cp.on('close', code => {\n      if (code === 0) return\n      rec.emit('error', `${this.cmd} has exited with error code ${code}.\n\nEnable debugging with the environment variable DEBUG=record.`\n      )\n    })\n\n    err.on('data', chunk => {\n      debug(`STDERR: ${chunk}`)\n    })\n\n    rec.on('data', chunk => {\n      debug(`Recording ${chunk.length} bytes`)\n    })\n\n    rec.on('end', () => {\n      debug('Recording ended')\n    })\n\n    return this\n  }\n\n  stop () {\n    assert(this.process, 'Recording not yet started')\n\n    this.process.kill()\n  }\n\n  pause () {\n    assert(this.process, 'Recording not yet started')\n\n    this.process.kill('SIGSTOP')\n    this._stream.pause()\n    debug('Paused recording')\n  }\n\n  resume () {\n    assert(this.process, 'Recording not yet started')\n\n    this.process.kill('SIGCONT')\n    this._stream.resume()\n    debug('Resumed recording')\n  }\n\n  isPaused () {\n    assert(this.process, 'Recording not yet started')\n\n    return this._stream.isPaused()\n  }\n\n  stream () {\n    assert(this._stream, 'Recording not yet started')\n\n    return this._stream\n  }\n}\n\nmodule.exports = {\n  record: (...args) => new Recording(...args)\n}\n"]},"metadata":{},"sourceType":"script"}